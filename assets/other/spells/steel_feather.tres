[gd_resource type="Resource" load_steps=4 format=2]

[ext_resource path="res://src/classes/spell_data.gd" type="Script" id=1]
[ext_resource path="res://assets/graphics/spells.png" type="Texture" id=2]

[sub_resource type="GDScript" id=1]
script/source = "extends SpellActions


func can_cast_with_hand(hand):
	for x in hand.cards:
		if card_selectable(x):
			return true
	
	return false


func can_cast_with_selection(selection):
	# yes it can be  simpler but i wanna also do cards acting like they're of multiple suits
	return is_selection_of_suit(selection, 2) || is_selection_of_suit(selection, 3)


func is_selection_of_suit(selection, suit):
	var count = 0
	for x in selection:
		if x.is_of_suit(suit):
			count += 1
	
	return count == selection.size()


func card_selectable(card):
	return (card.is_of_suit(2) || card.is_of_suit(3))


func cast(owner, selection = []):	
	if is_selection_of_suit(selection, 2):
		owner.state.status_turns.append(StatusEffect.new(
			owner.data,
			\"damage\",
			selection.size() * 3,
			1
		))
		
	if is_selection_of_suit(selection, 3):
		owner.rival.state.status_turns.append(StatusEffect.new(
			owner.rival.data,
			\"damage\",
			-selection.size() * 4,
			1
		))

	owner.discard_cards(selection)
"

[resource]
script = ExtResource( 1 )
spell_id = 21
texture = ExtResource( 2 )
texture_frame = 21
cost_min = 1
cost_max = 32
cooldown = 3
cooldown_start = 0
actions = SubResource( 1 )
